{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/tapchief-assingement/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/SignupFormContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport Card from \"./../Cards/Card/Card\";\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\";\nimport * as textProcessor from \"./../../utils/textProcesser\";\n\nclass SignupFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.indexButtonhandler = event => {\n      event.preventDefault();\n\n      if (!this.state.form.text.valid) {\n        alert(\"There is no text for Invert Indexing\");\n        return;\n      } else {\n        let text = textProcessor.removeStopWords(this.state.form.text.value.toLowerCase());\n        console.log(text);\n        let paras = textProcessor.splitInParas(text);\n        console.log(paras);\n        let indexObj = textProcessor.invertIndexing(paras);\n        console.log(indexObj);\n        this.setState({\n          indexObj: indexObj\n        });\n      }\n    };\n\n    this.searchButtonHandler = event => {\n      event.preventDefault();\n\n      if (this.state.indexObj == null) {\n        alert(\"Press Index Button First before Search\");\n        return;\n      }\n\n      if (!this.state.formIsValid) {\n        alert(\"Please Fill up the form properly\");\n        return;\n      }\n\n      const indexObj = this.state.indexObj;\n      console.log(indexObj);\n      console.log(indexObj[\"lorem\"]);\n      console.log(event.target.value.toLowerCase());\n      this.setState({\n        searchResult: indexObj[this.state.form.searchWord.value.toLowerCase()]\n      });\n      console.log(this.state.searchResult);\n    };\n\n    this.clearButtonhandler = () => {//location.reload(true)\n    };\n\n    this.state = {\n      form: {\n        text: {\n          elementType: \"textarea\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          //whether value is false or correct\n          touched: false\n        },\n        searchWord: {\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Enter Search Word\",\n          valid: \"false\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      searchResult: null,\n      formIsValid: false,\n      //this property can be used to check whether we can submit the form or not\n      indexObj: null\n    };\n  }\n\n  checkValidity(rules, value) {\n    let isValid = true;\n    Object.keys(rules).forEach(rule => {\n      if (rule == \"required\") {\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)));\n      } else if (rule == \"minlen\") {\n        isValid = isValid && Validator.isLength(value, rules[rule]);\n      } else if (rule == \"maxlen\") {\n        isValid = isValid && Validator.isLength(value, 0, rules[rule] + 1);\n      } else if (rule == \"isEmail\") {\n        isValid = isValid && Validator.isEmail(value);\n      } else if (rule == \"isNumber\") {\n        isValid = isValid && Validator.isNumeric(value);\n      }\n    });\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    //make an instance fo the form\n    const updatedForm = _objectSpread({}, this.state.form); //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n\n\n    const updatedFormElement = updatedForm[inputIdentifier]; //set the new value\n\n    updatedFormElement.value = event.target.value; //check the validity of the new value\n\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value);\n    updatedFormElement.touched = true; //set the element of the form to the updated form\n\n    updatedForm[inputIdentifier] = updatedFormElement; //check the validity of the form\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedForm) {\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n    } //set the from in the state to the updated form and also set the validity status of yhe form\n\n\n    this.setState({\n      form: updatedForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const form = Object.keys(this.state.form).map(inputField => React.createElement(Input, {\n      elementType: this.state.form[inputField].elementType,\n      inputType: this.state.form[inputField].inputType,\n      placeholder: this.state.form[inputField].placeholder,\n      value: this.state.form[inputField].value,\n      valid: this.state.form[inputField].valid,\n      changed: event => this.inputChangedHandler(event, inputField),\n      touched: this.state.form[inputField].touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n    return React.createElement(\"form\", {\n      className: styles.SignupFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, form, this.state.searchResult ? React.createElement(Card, {\n      input: this.state.form.searchWord.value,\n      output: this.state.searchResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }) : null, React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      clicked: this.searchButtonHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"To Search\"), React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formInValid,\n      clicked: this.indexButtonhandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Index\"), React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Clear\"));\n  }\n\n}\n\nexport default SignupFormContainer;","map":{"version":3,"sources":["/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/SignupFormContainer.js"],"names":["React","Component","Button","styles","Card","Input","Validator","textProcessor","SignupFormContainer","constructor","props","indexButtonhandler","event","preventDefault","state","form","text","valid","alert","removeStopWords","value","toLowerCase","console","log","paras","splitInParas","indexObj","invertIndexing","setState","searchButtonHandler","formIsValid","target","searchResult","searchWord","clearButtonhandler","elementType","inputType","placeholder","validationRules","required","touched","checkValidity","rules","isValid","Object","keys","forEach","rule","isEmpty","ltrim","rtrim","isLength","isEmail","isNumeric","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","render","map","inputField","formInValid"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport Card from \"./../Cards/Card/Card\"\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\"\nimport * as textProcessor from \"./../../utils/textProcesser\"\n\nclass SignupFormContainer extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      form:{\n        text: {\n          elementType: \"textarea\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules:{\n            required: true\n          },\n          valid: false,//whether value is false or correct\n          touched: false\n        },\n        searchWord:{\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Enter Search Word\",\n          valid: \"false\",\n          validationRules:{\n            required: true,\n          },\n          valid: false,\n          touched: false\n        },\n      },\n      searchResult: null,\n      formIsValid: false,//this property can be used to check whether we can submit the form or not\n      indexObj: null,\n    }\n  }\n\n  checkValidity(rules, value){\n    let isValid = true\n    Object.keys(rules).forEach(rule => {\n      if(rule == \"required\"){\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)))\n      }else if(rule == \"minlen\"){\n        isValid = isValid && Validator.isLength(value, rules[rule])\n      }else if(rule == \"maxlen\"){\n        isValid = isValid && Validator.isLength(value, 0, rules[rule]+1)\n      }else if(rule == \"isEmail\"){\n        isValid = isValid && Validator.isEmail(value)\n      }else if(rule == \"isNumber\"){\n        isValid = isValid && Validator.isNumeric(value)\n      }\n    })\n    return isValid\n  }\n  inputChangedHandler(event, inputIdentifier){\n    //make an instance fo the form\n    const updatedForm = {\n      ...this.state.form\n    }\n    //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n    const updatedFormElement = updatedForm[inputIdentifier]\n\n    //set the new value\n    updatedFormElement.value = event.target.value\n    //check the validity of the new value\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value)\n\n    updatedFormElement.touched = true\n    \n    //set the element of the form to the updated form\n    updatedForm[inputIdentifier] = updatedFormElement\n    \n    //check the validity of the form\n    let formIsValid = true\n    for (let inputIdentifier in updatedForm){\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid\n    }\n\n    //set the from in the state to the updated form and also set the validity status of yhe form\n    this.setState({\n      form:updatedForm,\n      formIsValid: formIsValid\n    })\n\n  }\n\n  indexButtonhandler = (event)=>{\n    event.preventDefault()\n    if(!this.state.form.text.valid){\n      alert(\"There is no text for Invert Indexing\")\n      return\n    }else{\n      let text = textProcessor.removeStopWords(this.state.form.text.value.toLowerCase())\n      console.log(text)\n      let paras = textProcessor.splitInParas(text)\n      console.log(paras)\n      let indexObj = textProcessor.invertIndexing(paras)\n      console.log(indexObj)\n      this.setState({\n        indexObj: indexObj\n      })\n    }\n  }\n\n  searchButtonHandler = (event)=>{\n    event.preventDefault()\n    if(this.state.indexObj == null){\n      alert(\"Press Index Button First before Search\")\n      return\n    }\n    if(!this.state.formIsValid){\n      alert(\"Please Fill up the form properly\")\n      return\n    }\n    const indexObj = this.state.indexObj\n    console.log(indexObj)\n    console.log(indexObj[\"lorem\"])\n    console.log(event.target.value.toLowerCase())\n    this.setState({\n      searchResult: indexObj[this.state.form.searchWord.value.toLowerCase()]\n    })\n    console.log(this.state.searchResult)\n  }\n  clearButtonhandler = ()=>{\n    //location.reload(true)\n  }\n\n  render(){\n    const form = Object.keys(this.state.form).map(inputField => (\n      <Input elementType = {this.state.form[inputField].elementType}\n      inputType = {this.state.form[inputField].inputType}\n      placeholder = {this.state.form[inputField].placeholder}\n      value = {this.state.form[inputField].value}\n      valid = {this.state.form[inputField].valid}\n      changed = {(event) => this.inputChangedHandler(event, inputField)}\n      touched = {this.state.form[inputField].touched}\n      />\n    ))\n    return(\n      <form className = {styles.SignupFormContainer}>\n        {form}\n        {\n          this.state.searchResult?<Card input = {this.state.form.searchWord.value} output = {this.state.searchResult}></Card>:null\n        }\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid} clicked = {this.searchButtonHandler}>To Search</Button>\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formInValid} clicked = {this.indexButtonhandler}>Index</Button>\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid}>Clear</Button>\n      </form>\n    )\n  }\n}\n\nexport default SignupFormContainer;"]},"metadata":{},"sourceType":"module"}
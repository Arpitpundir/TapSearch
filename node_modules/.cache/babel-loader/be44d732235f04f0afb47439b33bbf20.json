{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/minor1/emotional-detector/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/minor1/emotional-detector/client/src/components/formsContainers/LoginFormContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Validator from \"validator\";\nimport Input from \"./../UI/Input/Input\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./LoginFormContainer.module.css\";\nimport axios from \"axios\";\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loginHandler = async event => {\n      try {\n        event.preventDefault();\n        let formData = {};\n\n        for (let formElementIdentifier in this.state.form) {\n          formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\n        }\n\n        console.log(formData);\n        const res = await axios({\n          method: \"P\",\n          url: \"http://127.0.0.1:9000/emotion-detector/user/login\",\n          data: formData\n        });\n\n        if (res.data.status == \"success\") {\n          console.log(res.data.user);\n          this.props.setUpAuthHandler(res.data.user);\n          alert(\"LoggedIn successfully\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      form: {\n        enrollNo: {\n          elementType: \"input\",\n          inputType: \"Number\",\n          placeholder: \"EnrollNum\",\n          value: \"\",\n          validationRules: {\n            required: true,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          inputElement: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n  }\n\n  checkValidity(rules, value) {\n    let isValid = true;\n    Object.keys(rules).forEach(rule => {\n      if (rule == \"required\") {\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)));\n      } else if (rule == \"minlen\") {\n        isValid = isValid && Validator.isLength(value, rules[rule]);\n      } else if (rule == \"maxlen\") {\n        isValid = isValid && Validator.isLength(value, 0, rules[rule] + 1);\n      } else if (rule == \"isEmail\") {\n        isValid = isValid && Validator.isEmail(value);\n      } else if (rule == \"isNumber\") {\n        isValid = isValid && Validator.isNumeric(value);\n      }\n    });\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    //make an instance fo the form\n    const updatedForm = _objectSpread({}, this.state.form); //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n\n\n    const updatedFormElement = updatedForm[inputIdentifier]; //set the new value\n\n    updatedFormElement.value = event.target.value; //check the validity of the new value\n\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value);\n    updatedFormElement.touched = true; //set the element of the form to the updated form\n\n    updatedForm[inputIdentifier] = updatedFormElement; //check the validity of the form\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedForm) {\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n    } //set the from in the state to the updated form and also set the validity status of yhe form\n\n\n    this.setState({\n      form: updatedForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const form = Object.keys(this.state.form).map(inputField => React.createElement(Input, {\n      elementType: this.state.form[inputField].elementType,\n      inputType: this.state.form[inputField].inputType,\n      placeholder: this.state.form[inputField].placeholder,\n      value: this.state.form[inputField].value,\n      valid: this.state.form[inputField].valid,\n      changed: event => this.inputChangedHandler(event, inputField),\n      touched: this.state.form[inputField].touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n    return React.createElement(\"form\", {\n      onSubmit: this.loginHandler,\n      className: styles.LoginFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/arpit/Documents/minor1/emotional-detector/client/src/components/formsContainers/LoginFormContainer.js"],"names":["React","Component","Validator","Input","Button","styles","axios","LoginForm","constructor","props","loginHandler","event","preventDefault","formData","formElementIdentifier","state","form","value","console","log","res","method","url","data","status","user","setUpAuthHandler","alert","error","enrollNo","elementType","inputType","placeholder","validationRules","required","isNumber","valid","touched","password","inputElement","checkValidity","rules","isValid","Object","keys","forEach","rule","isEmpty","ltrim","rtrim","isLength","isEmail","isNumeric","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","formIsValid","setState","render","map","inputField","LoginFormContainer"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport Validator from \"validator\"\nimport Input from \"./../UI/Input/Input\"\nimport Button from \"./../UI/Button/Button\"\nimport styles from \"./LoginFormContainer.module.css\"\nimport axios from \"axios\"\nclass LoginForm extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      form:{\n        enrollNo:{\n          elementType: \"input\",\n          inputType: \"Number\",\n          placeholder: \"EnrollNum\",\n          value:\"\",\n          validationRules:{\n            required: true,\n            isNumber:true\n          },\n          valid: false,\n          touched: false\n        },\n        password:{\n          elementType: \"input\",\n          inputElement: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          validationRules:{\n            required: true,\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    }\n  }\n\n  checkValidity(rules, value){\n    let isValid = true\n    Object.keys(rules).forEach(rule => {\n      if(rule == \"required\"){\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)))\n      }else if(rule == \"minlen\"){\n        isValid = isValid && Validator.isLength(value, rules[rule])\n      }else if(rule == \"maxlen\"){\n        isValid = isValid && Validator.isLength(value, 0, rules[rule]+1)\n      }else if(rule == \"isEmail\"){\n        isValid = isValid && Validator.isEmail(value)\n      }else if(rule == \"isNumber\"){\n        isValid = isValid && Validator.isNumeric(value)\n      }\n    })\n    return isValid\n  }\n\n  inputChangedHandler(event, inputIdentifier){\n    //make an instance fo the form\n    const updatedForm = {\n      ...this.state.form\n    }\n    //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n    const updatedFormElement = updatedForm[inputIdentifier]\n\n    //set the new value\n    updatedFormElement.value = event.target.value\n    //check the validity of the new value\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value)\n\n    updatedFormElement.touched = true\n    \n    //set the element of the form to the updated form\n    updatedForm[inputIdentifier] = updatedFormElement\n    \n    //check the validity of the form\n    let formIsValid = true\n    for (let inputIdentifier in updatedForm){\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid\n    }\n\n    //set the from in the state to the updated form and also set the validity status of yhe form\n    this.setState({\n      form:updatedForm,\n      formIsValid: formIsValid\n    })\n  }\n\n  loginHandler = async (event) => {\n    try{\n      event.preventDefault()\n      let formData = {}\n      for (let formElementIdentifier in this.state.form) {\n        formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\n    }\n    console.log(formData)\n      const res = await axios({\n        method: \"P\",\n        url: \"http://127.0.0.1:9000/emotion-detector/user/login\",\n        data: formData\n      })\n      if(res.data.status == \"success\"){\n        console.log(res.data.user)\n        this.props.setUpAuthHandler(res.data.user)\n        alert(\"LoggedIn successfully\")        \n      }\n    }catch(error){\n      console.log(error)\n    }\n  }\n  render(){\n    const form = Object.keys(this.state.form).map(inputField => (\n      <Input elementType = {this.state.form[inputField].elementType}\n      inputType = {this.state.form[inputField].inputType}\n      placeholder = {this.state.form[inputField].placeholder}\n      value = {this.state.form[inputField].value}\n      valid = {this.state.form[inputField].valid}\n      changed = {(event) => this.inputChangedHandler(event, inputField)}\n      touched = {this.state.form[inputField].touched}\n      />\n    ))\n    return(\n      <form onSubmit = {this.loginHandler} className = {styles.LoginFormContainer}>\n        {form}\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid}>Submit</Button>\n      </form>\n    )\n  }\n}\n\nexport default LoginForm"]},"metadata":{},"sourceType":"module"}
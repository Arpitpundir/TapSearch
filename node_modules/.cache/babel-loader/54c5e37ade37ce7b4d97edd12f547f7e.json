{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/minor1/emotional-detector/src/components/UI/Input/Input.js\";\nimport React from \"react\";\nimport styles from \"./Input.module.css\";\nimport Aux from \"./../../../hocs/Aux/Aux\";\n\nconst input = props => {\n  let inputElement = null; //we will use this var to store the final return value\n\n  const inputClasses = [styles.InputElement];\n  console.log(props.valid);\n\n  if (!props.valid && props.touched) {\n    inputClasses.push(styles.Invalid); //for adding an invalid classes that can help user to know what is wrong\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = React.createElement(\"input\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      });\n      break;\n\n    case \"textarea\":\n      inputElement = React.createElement(\"textarea\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n      break;\n\n    case \"select\":\n      inputElement = React.createElement(\"select\", {\n        className: styles.join(\" \"),\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, props.elementConfig.options.map(option => React.createElement(\"option\", {\n        key: option.value,\n        value: option.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, option.displayValue)));\n      break;\n\n    default:\n      inputElement = React.createElement(\"input\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n  }\n\n  return React.createElement(Aux, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, inputElement);\n};\n\nexport default input;","map":{"version":3,"sources":["/home/arpit/Documents/minor1/emotional-detector/src/components/UI/Input/Input.js"],"names":["React","styles","Aux","input","props","inputElement","inputClasses","InputElement","console","log","valid","touched","push","Invalid","elementType","join","inputType","placeholder","changed","value","elementConfig","options","map","option","displayValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,GAAP,MAAgB,yBAAhB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAS;AACrB,MAAIC,YAAY,GAAG,IAAnB,CADqB,CACE;;AACvB,QAAMC,YAAY,GAAG,CAACL,MAAM,CAACM,YAAR,CAArB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,KAAlB;;AACA,MAAG,CAACN,KAAK,CAACM,KAAP,IAAgBN,KAAK,CAACO,OAAzB,EAAiC;AAC/BL,IAAAA,YAAY,CAACM,IAAb,CAAkBX,MAAM,CAACY,OAAzB,EAD+B,CAE/B;AACD;;AAED,UAAOT,KAAK,CAACU,WAAb;AACE,SAAK,OAAL;AACAT,MAAAA,YAAY,GAAG;AACb,QAAA,SAAS,EAAIC,YAAY,CAACS,IAAb,CAAkB,IAAlB,CADA;AAEb,QAAA,IAAI,EAAIX,KAAK,CAACY,SAFD;AAGb,QAAA,WAAW,EAAIZ,KAAK,CAACa,WAHR;AAIb,QAAA,QAAQ,EAAIb,KAAK,CAACc,OAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AAKE;;AACF,SAAK,UAAL;AACAb,MAAAA,YAAY,GAAG;AACb,QAAA,SAAS,EAAIC,YAAY,CAACS,IAAb,CAAkB,IAAlB,CADA;AAEb,QAAA,IAAI,EAAIX,KAAK,CAACY,SAFD;AAGb,QAAA,WAAW,EAAIZ,KAAK,CAACa,WAHR;AAIb,QAAA,KAAK,EAAIb,KAAK,CAACe,KAJF;AAKb,QAAA,QAAQ,EAAIf,KAAK,CAACc,OALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AAME;;AACF,SAAK,QAAL;AACEb,MAAAA,YAAY,GAAG;AACb,QAAA,SAAS,EAAIJ,MAAM,CAACc,IAAP,CAAY,GAAZ,CADA;AAEb,QAAA,KAAK,EAAIX,KAAK,CAACe,KAFF;AAGb,QAAA,QAAQ,EAAIf,KAAK,CAACc,OAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKTd,KAAK,CAACgB,aAAN,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgCC,MAAM,IACpC;AAAQ,QAAA,GAAG,EAAIA,MAAM,CAACJ,KAAtB;AAA6B,QAAA,KAAK,EAAII,MAAM,CAACJ,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGI,MAAM,CAACC,YADV,CADF,CALS,CAAf;AAYA;;AACF;AACEnB,MAAAA,YAAY,GAAG;AACf,QAAA,SAAS,EAAIC,YAAY,CAACS,IAAb,CAAkB,IAAlB,CADE;AAEf,QAAA,IAAI,EAAIX,KAAK,CAACY,SAFC;AAGf,QAAA,WAAW,EAAIZ,KAAK,CAACa,WAHN;AAIf,QAAA,KAAK,EAAIb,KAAK,CAACe,KAJA;AAKf,QAAA,QAAQ,EAAIf,KAAK,CAACc,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AA/BJ;;AAuCA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,YADH,CADF;AAMD,CAvDD;;AAyDA,eAAeF,KAAf","sourcesContent":["import React from \"react\";\nimport styles from \"./Input.module.css\";\nimport Aux from \"./../../../hocs/Aux/Aux\"\n\nconst input = (props)=>{\n  let inputElement = null//we will use this var to store the final return value\n  const inputClasses = [styles.InputElement]\n\n  console.log(props.valid)\n  if(!props.valid && props.touched){\n    inputClasses.push(styles.Invalid)\n    //for adding an invalid classes that can help user to know what is wrong\n  }\n\n  switch(props.elementType){\n    case(\"input\"):\n    inputElement = <input\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      onChange = {props.changed}/>\n      break\n    case(\"textarea\"):\n    inputElement = <textarea\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      value = {props.value}\n      onChange = {props.changed}/>\n      break\n    case(\"select\"):\n      inputElement = <select\n        className = {styles.join(\" \")}\n        value = {props.value}\n        onChange = {props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key = {option.value} value = {option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>\n      break\n    default:\n      inputElement = <input\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      value = {props.value}\n      onChange = {props.changed}/>\n  }\n\n  return(\n    <Aux>\n      {inputElement}\n    </Aux>\n  )\n\n}\n\nexport default input"]},"metadata":{},"sourceType":"module"}
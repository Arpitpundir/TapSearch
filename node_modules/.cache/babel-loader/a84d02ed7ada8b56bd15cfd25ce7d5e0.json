{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/tapchief-assingement/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Button from \"../UI/Button/Button\";\nimport styles from \"./form.module.css\";\nimport Card from \"../Card/Card\";\nimport Input from \"../UI/Input/Input\";\nimport Validator from \"validator\";\nimport * as textProcessor from \"../../utils/textProcesser\";\n\nclass form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.indexButtonHandler = event => {\n      event.preventDefault();\n\n      if (!this.state.form.text.valid) {\n        alert(\"There is no text for Invert Indexing\");\n        return;\n      } else {\n        let text = textProcessor.removeStopWords(this.state.form.text.value.toLowerCase()); //console.log(text)\n\n        let paras = textProcessor.splitInParas(text); //console.log(paras)\n\n        let indexObj = textProcessor.invertIndexing(paras);\n        console.log(indexObj);\n        this.setState({\n          indexObj: indexObj\n        });\n        alert;\n      }\n    };\n\n    this.searchButtonHandler = event => {\n      event.preventDefault();\n\n      if (this.state.indexObj == null) {\n        alert(\"Press Index Button First before Search\");\n        return;\n      }\n\n      if (!this.state.formIsValid) {\n        alert(\"Please Fill up the form properly\");\n        return;\n      }\n\n      const indexObj = this.state.indexObj;\n      console.log(indexObj);\n      console.log(event.target.value.toLowerCase());\n      let output = indexObj[this.state.form.searchWord.value.toLowerCase()] === undefined ? [] : indexObj[this.state.form.searchWord.value.toLowerCase()];\n      this.setState({\n        search: {\n          input: this.state.form.searchWord.value,\n          output: output\n        }\n      });\n    };\n\n    this.clearButtonhandler = () => {//location.reload(true)\n    };\n\n    this.state = {\n      form: {\n        text: {\n          elementType: \"textarea\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          //whether value is false or correct\n          touched: false\n        },\n        searchWord: {\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Enter Search Word\",\n          valid: \"false\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      search: {\n        input: null,\n        output: null\n      },\n      formIsValid: false,\n      //this property can be used to check whether we can submit the form or not\n      indexObj: null\n    };\n  }\n\n  checkValidity(rules, value) {\n    let isValid = true;\n    Object.keys(rules).forEach(rule => {\n      if (rule == \"required\") {\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)));\n      } else if (rule == \"minlen\") {\n        isValid = isValid && Validator.isLength(value, rules[rule]);\n      } else if (rule == \"maxlen\") {\n        isValid = isValid && Validator.isLength(value, 0, rules[rule] + 1);\n      } else if (rule == \"isEmail\") {\n        isValid = isValid && Validator.isEmail(value);\n      } else if (rule == \"isNumber\") {\n        isValid = isValid && Validator.isNumeric(value);\n      }\n    });\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    //make an instance fo the form\n    const updatedForm = _objectSpread({}, this.state.form); //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n\n\n    const updatedFormElement = updatedForm[inputIdentifier]; //set the new value\n\n    updatedFormElement.value = event.target.value; //check the validity of the new value\n\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value);\n    updatedFormElement.touched = true; //set the element of the form to the updated form\n\n    updatedForm[inputIdentifier] = updatedFormElement; //check the validity of the form\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedForm) {\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n    } //set the from in the state to the updated form and also set the validity status of yhe form\n\n\n    this.setState({\n      form: updatedForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const form = Object.keys(this.state.form).map(inputField => React.createElement(Input, {\n      elementType: this.state.form[inputField].elementType,\n      inputType: this.state.form[inputField].inputType,\n      placeholder: this.state.form[inputField].placeholder,\n      value: this.state.form[inputField].value,\n      valid: this.state.form[inputField].valid,\n      changed: event => this.inputChangedHandler(event, inputField),\n      touched: this.state.form[inputField].touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }));\n    return React.createElement(\"form\", {\n      className: styles.SignupFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, form, this.state.search.output ? React.createElement(Card, {\n      input: this.state.search.input,\n      output: this.state.search.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }) : null, React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      clicked: this.indexButtonHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Index\"), React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formInValid,\n      clicked: this.searchButtonHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Clear\"));\n  }\n\n}\n\nexport default form;","map":{"version":3,"sources":["/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/form.js"],"names":["React","Component","Button","styles","Card","Input","Validator","textProcessor","form","constructor","props","indexButtonHandler","event","preventDefault","state","text","valid","alert","removeStopWords","value","toLowerCase","paras","splitInParas","indexObj","invertIndexing","console","log","setState","searchButtonHandler","formIsValid","target","output","searchWord","undefined","search","input","clearButtonhandler","elementType","inputType","placeholder","validationRules","required","touched","checkValidity","rules","isValid","Object","keys","forEach","rule","isEmpty","ltrim","rtrim","isLength","isEmail","isNumeric","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","render","map","inputField","SignupFormContainer","formInValid"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,KAAKC,aAAZ,MAA+B,2BAA/B;;AAEA,MAAMC,IAAN,SAAmBP,SAAnB,CAA4B;AAC1BQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAuFlBC,kBAvFkB,GAuFIC,KAAD,IAAS;AAC5BA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAG,CAAC,KAAKC,KAAL,CAAWN,IAAX,CAAgBO,IAAhB,CAAqBC,KAAzB,EAA+B;AAC7BC,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACD,OAHD,MAGK;AACH,YAAIF,IAAI,GAAGR,aAAa,CAACW,eAAd,CAA8B,KAAKJ,KAAL,CAAWN,IAAX,CAAgBO,IAAhB,CAAqBI,KAArB,CAA2BC,WAA3B,EAA9B,CAAX,CADG,CAEH;;AACA,YAAIC,KAAK,GAAGd,aAAa,CAACe,YAAd,CAA2BP,IAA3B,CAAZ,CAHG,CAIH;;AACA,YAAIQ,QAAQ,GAAGhB,aAAa,CAACiB,cAAd,CAA6BH,KAA7B,CAAf;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAKI,QAAL,CAAc;AACZJ,UAAAA,QAAQ,EAAEA;AADE,SAAd;AAGAN,QAAAA,KAAK;AACN;AACF,KAxGiB;;AAAA,SA0GlBW,mBA1GkB,GA0GKhB,KAAD,IAAS;AAC7BA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAG,KAAKC,KAAL,CAAWS,QAAX,IAAuB,IAA1B,EAA+B;AAC7BN,QAAAA,KAAK,CAAC,wCAAD,CAAL;AACA;AACD;;AACD,UAAG,CAAC,KAAKH,KAAL,CAAWe,WAAf,EAA2B;AACzBZ,QAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AACD;;AACD,YAAMM,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAA5B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACkB,MAAN,CAAaX,KAAb,CAAmBC,WAAnB,EAAZ;AACA,UAAIW,MAAM,GAAGR,QAAQ,CAAC,KAAKT,KAAL,CAAWN,IAAX,CAAgBwB,UAAhB,CAA2Bb,KAA3B,CAAiCC,WAAjC,EAAD,CAAR,KAA6Da,SAA7D,GAAuE,EAAvE,GAA0EV,QAAQ,CAAC,KAAKT,KAAL,CAAWN,IAAX,CAAgBwB,UAAhB,CAA2Bb,KAA3B,CAAiCC,WAAjC,EAAD,CAA/F;AAEA,WAAKO,QAAL,CAAc;AACZO,QAAAA,MAAM,EAAC;AACLC,UAAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWN,IAAX,CAAgBwB,UAAhB,CAA2Bb,KAD7B;AAELY,UAAAA,MAAM,EAAEA;AAFH;AADK,OAAd;AAMD,KA/HiB;;AAAA,SAgIlBK,kBAhIkB,GAgIG,MAAI,CACvB;AACD,KAlIiB;;AAEhB,SAAKtB,KAAL,GAAa;AACXN,MAAAA,IAAI,EAAC;AACHO,QAAAA,IAAI,EAAE;AACJsB,UAAAA,WAAW,EAAE,UADT;AAEJC,UAAAA,SAAS,EAAE,UAFP;AAGJC,UAAAA,WAAW,EAAE,iBAHT;AAIJpB,UAAAA,KAAK,EAAE,EAJH;AAKJqB,UAAAA,eAAe,EAAC;AACdC,YAAAA,QAAQ,EAAE;AADI,WALZ;AAQJzB,UAAAA,KAAK,EAAE,KARH;AAQS;AACb0B,UAAAA,OAAO,EAAE;AATL,SADH;AAYHV,QAAAA,UAAU,EAAC;AACTK,UAAAA,WAAW,EAAE,OADJ;AAETC,UAAAA,SAAS,EAAE,MAFF;AAGTC,UAAAA,WAAW,EAAE,mBAHJ;AAITvB,UAAAA,KAAK,EAAE,OAJE;AAKTwB,UAAAA,eAAe,EAAC;AACdC,YAAAA,QAAQ,EAAE;AADI,WALP;AAQTzB,UAAAA,KAAK,EAAE,KARE;AAST0B,UAAAA,OAAO,EAAE;AATA;AAZR,OADM;AAyBXR,MAAAA,MAAM,EAAC;AACLC,QAAAA,KAAK,EAAE,IADF;AAELJ,QAAAA,MAAM,EAAE;AAFH,OAzBI;AA6BXF,MAAAA,WAAW,EAAE,KA7BF;AA6BQ;AACnBN,MAAAA,QAAQ,EAAE;AA9BC,KAAb;AAgCD;;AAEDoB,EAAAA,aAAa,CAACC,KAAD,EAAQzB,KAAR,EAAc;AACzB,QAAI0B,OAAO,GAAG,IAAd;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2BC,IAAI,IAAI;AACjC,UAAGA,IAAI,IAAI,UAAX,EAAsB;AACpBJ,QAAAA,OAAO,GAAGA,OAAO,IAAI,CAACvC,SAAS,CAAC4C,OAAV,CAAkB5C,SAAS,CAAC6C,KAAV,CAAgB7C,SAAS,CAAC8C,KAAV,CAAgBjC,KAAhB,CAAhB,CAAlB,CAAtB;AACD,OAFD,MAEM,IAAG8B,IAAI,IAAI,QAAX,EAAoB;AACxBJ,QAAAA,OAAO,GAAGA,OAAO,IAAIvC,SAAS,CAAC+C,QAAV,CAAmBlC,KAAnB,EAA0ByB,KAAK,CAACK,IAAD,CAA/B,CAArB;AACD,OAFK,MAEA,IAAGA,IAAI,IAAI,QAAX,EAAoB;AACxBJ,QAAAA,OAAO,GAAGA,OAAO,IAAIvC,SAAS,CAAC+C,QAAV,CAAmBlC,KAAnB,EAA0B,CAA1B,EAA6ByB,KAAK,CAACK,IAAD,CAAL,GAAY,CAAzC,CAArB;AACD,OAFK,MAEA,IAAGA,IAAI,IAAI,SAAX,EAAqB;AACzBJ,QAAAA,OAAO,GAAGA,OAAO,IAAIvC,SAAS,CAACgD,OAAV,CAAkBnC,KAAlB,CAArB;AACD,OAFK,MAEA,IAAG8B,IAAI,IAAI,UAAX,EAAsB;AAC1BJ,QAAAA,OAAO,GAAGA,OAAO,IAAIvC,SAAS,CAACiD,SAAV,CAAoBpC,KAApB,CAArB;AACD;AACF,KAZD;AAaA,WAAO0B,OAAP;AACD;;AACDW,EAAAA,mBAAmB,CAAC5C,KAAD,EAAQ6C,eAAR,EAAwB;AACzC;AACA,UAAMC,WAAW,qBACZ,KAAK5C,KAAL,CAAWN,IADC,CAAjB,CAFyC,CAKzC;AACA;AACA;;;AACA,UAAMmD,kBAAkB,GAAGD,WAAW,CAACD,eAAD,CAAtC,CARyC,CAUzC;;AACAE,IAAAA,kBAAkB,CAACxC,KAAnB,GAA2BP,KAAK,CAACkB,MAAN,CAAaX,KAAxC,CAXyC,CAYzC;;AACAwC,IAAAA,kBAAkB,CAAC3C,KAAnB,GAA2B,KAAK2B,aAAL,CAAmBgB,kBAAkB,CAACnB,eAAtC,EAAuDmB,kBAAkB,CAACxC,KAA1E,CAA3B;AAEAwC,IAAAA,kBAAkB,CAACjB,OAAnB,GAA6B,IAA7B,CAfyC,CAiBzC;;AACAgB,IAAAA,WAAW,CAACD,eAAD,CAAX,GAA+BE,kBAA/B,CAlByC,CAoBzC;;AACA,QAAI9B,WAAW,GAAG,IAAlB;;AACA,SAAK,IAAI4B,eAAT,IAA4BC,WAA5B,EAAwC;AACtC7B,MAAAA,WAAW,GAAG6B,WAAW,CAACD,eAAD,CAAX,CAA6BzC,KAA7B,IAAsCa,WAApD;AACD,KAxBwC,CA0BzC;;;AACA,SAAKF,QAAL,CAAc;AACZnB,MAAAA,IAAI,EAACkD,WADO;AAEZ7B,MAAAA,WAAW,EAAEA;AAFD,KAAd;AAKD;;AA+CD+B,EAAAA,MAAM,GAAE;AACN,UAAMpD,IAAI,GAAGsC,MAAM,CAACC,IAAP,CAAY,KAAKjC,KAAL,CAAWN,IAAvB,EAA6BqD,GAA7B,CAAiCC,UAAU,IACtD,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAI,KAAKhD,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4BzB,WAAlD;AACA,MAAA,SAAS,EAAI,KAAKvB,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4BxB,SADzC;AAEA,MAAA,WAAW,EAAI,KAAKxB,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4BvB,WAF3C;AAGA,MAAA,KAAK,EAAI,KAAKzB,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4B3C,KAHrC;AAIA,MAAA,KAAK,EAAI,KAAKL,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4B9C,KAJrC;AAKA,MAAA,OAAO,EAAKJ,KAAD,IAAW,KAAK4C,mBAAL,CAAyB5C,KAAzB,EAAgCkD,UAAhC,CALtB;AAMA,MAAA,OAAO,EAAI,KAAKhD,KAAL,CAAWN,IAAX,CAAgBsD,UAAhB,EAA4BpB,OANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;AAUA,WACE;AAAM,MAAA,SAAS,EAAIvC,MAAM,CAAC4D,mBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGvD,IADH,EAGI,KAAKM,KAAL,CAAWoB,MAAX,CAAkBH,MAAlB,GAAyB,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAI,KAAKjB,KAAL,CAAWoB,MAAX,CAAkBC,KAAjC;AAAwC,MAAA,MAAM,EAAI,KAAKrB,KAAL,CAAWoB,MAAX,CAAkBH,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB,GAA6G,IAHjH,EAKE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,CAAC,QAAD,CAAnB;AAA+B,MAAA,QAAQ,EAAI,CAAC,KAAKjB,KAAL,CAAWe,WAAvD;AAAoE,MAAA,OAAO,EAAI,KAAKlB,kBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,EAME,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,CAAC,QAAD,CAAnB;AAA+B,MAAA,QAAQ,EAAI,CAAC,KAAKG,KAAL,CAAWkD,WAAvD;AAAoE,MAAA,OAAO,EAAI,KAAKpC,mBAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,EAOE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAI,CAAC,QAAD,CAAnB;AAA+B,MAAA,QAAQ,EAAI,CAAC,KAAKd,KAAL,CAAWe,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPF,CADF;AAWD;;AA3JyB;;AA8J5B,eAAerB,IAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Button from \"../UI/Button/Button\";\nimport styles from \"./form.module.css\";\nimport Card from \"../Card/Card\"\nimport Input from \"../UI/Input/Input\";\nimport Validator from \"validator\"\nimport * as textProcessor from \"../../utils/textProcesser\"\n\nclass form extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      form:{\n        text: {\n          elementType: \"textarea\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules:{\n            required: true\n          },\n          valid: false,//whether value is false or correct\n          touched: false\n        },\n        searchWord:{\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Enter Search Word\",\n          valid: \"false\",\n          validationRules:{\n            required: true,\n          },\n          valid: false,\n          touched: false\n        },\n      },\n      search:{\n        input: null,\n        output: null\n      },\n      formIsValid: false,//this property can be used to check whether we can submit the form or not\n      indexObj: null,\n    }\n  }\n\n  checkValidity(rules, value){\n    let isValid = true\n    Object.keys(rules).forEach(rule => {\n      if(rule == \"required\"){\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)))\n      }else if(rule == \"minlen\"){\n        isValid = isValid && Validator.isLength(value, rules[rule])\n      }else if(rule == \"maxlen\"){\n        isValid = isValid && Validator.isLength(value, 0, rules[rule]+1)\n      }else if(rule == \"isEmail\"){\n        isValid = isValid && Validator.isEmail(value)\n      }else if(rule == \"isNumber\"){\n        isValid = isValid && Validator.isNumeric(value)\n      }\n    })\n    return isValid\n  }\n  inputChangedHandler(event, inputIdentifier){\n    //make an instance fo the form\n    const updatedForm = {\n      ...this.state.form\n    }\n    //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n    const updatedFormElement = updatedForm[inputIdentifier]\n\n    //set the new value\n    updatedFormElement.value = event.target.value\n    //check the validity of the new value\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value)\n\n    updatedFormElement.touched = true\n    \n    //set the element of the form to the updated form\n    updatedForm[inputIdentifier] = updatedFormElement\n    \n    //check the validity of the form\n    let formIsValid = true\n    for (let inputIdentifier in updatedForm){\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid\n    }\n\n    //set the from in the state to the updated form and also set the validity status of yhe form\n    this.setState({\n      form:updatedForm,\n      formIsValid: formIsValid\n    })\n\n  }\n\n  indexButtonHandler = (event)=>{\n    event.preventDefault()\n    if(!this.state.form.text.valid){\n      alert(\"There is no text for Invert Indexing\")\n      return\n    }else{\n      let text = textProcessor.removeStopWords(this.state.form.text.value.toLowerCase())\n      //console.log(text)\n      let paras = textProcessor.splitInParas(text)\n      //console.log(paras)\n      let indexObj = textProcessor.invertIndexing(paras)\n      console.log(indexObj)\n      this.setState({\n        indexObj: indexObj\n      })\n      alert\n    }\n  }\n\n  searchButtonHandler = (event)=>{\n    event.preventDefault()\n    if(this.state.indexObj == null){\n      alert(\"Press Index Button First before Search\")\n      return\n    }\n    if(!this.state.formIsValid){\n      alert(\"Please Fill up the form properly\")\n      return\n    }\n    const indexObj = this.state.indexObj\n    console.log(indexObj)\n    console.log(event.target.value.toLowerCase())\n    let output = indexObj[this.state.form.searchWord.value.toLowerCase()] === undefined?[]:indexObj[this.state.form.searchWord.value.toLowerCase()]\n\n    this.setState({\n      search:{\n        input: this.state.form.searchWord.value,\n        output: output\n      }\n    })\n  }\n  clearButtonhandler = ()=>{\n    //location.reload(true)\n  }\n\n  render(){\n    const form = Object.keys(this.state.form).map(inputField => (\n      <Input elementType = {this.state.form[inputField].elementType}\n      inputType = {this.state.form[inputField].inputType}\n      placeholder = {this.state.form[inputField].placeholder}\n      value = {this.state.form[inputField].value}\n      valid = {this.state.form[inputField].valid}\n      changed = {(event) => this.inputChangedHandler(event, inputField)}\n      touched = {this.state.form[inputField].touched}\n      />\n    ))\n    return(\n      <form className = {styles.SignupFormContainer}>\n        {form}\n        {\n          this.state.search.output?<Card input = {this.state.search.input} output = {this.state.search.output}></Card>:null\n        }\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid} clicked = {this.indexButtonHandler}>Index</Button>\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formInValid} clicked = {this.searchButtonHandler}>Search</Button>\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid}>Clear</Button>\n      </form>\n    )\n  }\n}\n\nexport default form;"]},"metadata":{},"sourceType":"module"}
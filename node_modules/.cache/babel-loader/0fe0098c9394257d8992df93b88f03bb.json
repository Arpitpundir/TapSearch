{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/minor1/emotional-detector/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/minor1/emotional-detector/src/components/formsContainers/SignupFormContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport axios from \"axios\";\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\";\nimport { exportDefaultSpecifier } from \"@babel/types\";\n\nclass SignupFormContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: {\n        name: {\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Your Name\",\n          value: \"\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          //whether value is false or correct\n          touched: false\n        },\n        enrollNo: {\n          elementType: \"input\",\n          inputType: \"number\",\n          placeholder: \"Your Enroll No\",\n          valid: \"false\",\n          validationRules: {\n            required: true,\n            isNumber: true\n          },\n          valid: false,\n          touched: true\n        },\n        email: {\n          elementType: \"input\",\n          inputType: \"email\",\n          placeholder: \"Your Email\",\n          value: \" \",\n          valid: false,\n          touched: false,\n          validationRules: {\n            required: true,\n            isEmail: true\n          }\n        },\n        password: {\n          elementType: \"input\",\n          inputType: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          valid: false,\n          validationRules: {\n            required: true\n          }\n        }\n      },\n      formIsValid: false,\n      //this property can be used to check whether we can submit the form or not\n      loading: false\n    };\n  }\n\n  checkValidity(rules, value) {\n    let isValid = true;\n    Object.keys(rules).forEach(rule => {\n      if (rule == \"required\") {\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)));\n      } else if (rule == \"minlen\") {\n        isValid = isValid && !Validator.isLength(value, rules[rule]);\n      } else if (rule == \"maxlen\") {\n        isValid = isValid && !Validator.isLength(value, 0, rules[rule] + 1);\n      } else if (rule == \"isEmail\") {\n        isValid = isValid && !Validator.isEmail(value);\n      } else if (rule == \"isNumber\") {\n        isValid = isValid && !Validator.isNumber(value);\n      }\n    });\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    //make an instance fo the form\n    const updatedForm = _objectSpread({}, this.state.form); //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n\n\n    const updatedFormElement = updatedForm[inputIdentifier]; //set the new value\n\n    updatedFormElement.value = event.target.value; //check the validity of the new value\n\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value); //set the element of the form to the updated form\n\n    updatedForm[inputIdentifier] = updatedFormElement; //check the validity of the form\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedForm) {\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n    } //set the from in the state to the updated form and also set the validity status of yhe form\n\n\n    this.setState({\n      form: updatedForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const form = Object.keys(this.state.form).map(inputField => React.createElement(Input, {\n      elementType: this.state.form[inputField].elementType,\n      inputType: this.state.form[inputField].inputType,\n      placeholder: this.state.form[inputField].placeholder,\n      value: this.state.form[inputField].value,\n      valid: this.state.form[inputField].valid,\n      changed: event => this.inputChangedHandler(event, inputField),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n    return React.createElement(\"form\", {\n      onSubmit: this.signupHandler,\n      className: styles.SignupFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default SignupFormContainer;","map":{"version":3,"sources":["/home/arpit/Documents/minor1/emotional-detector/src/components/formsContainers/SignupFormContainer.js"],"names":["React","Component","Button","styles","axios","Input","Validator","exportDefaultSpecifier","SignupFormContainer","constructor","props","state","form","name","elementType","inputType","placeholder","value","validationRules","required","valid","touched","enrollNo","isNumber","email","isEmail","password","formIsValid","loading","checkValidity","rules","isValid","Object","keys","forEach","rule","isEmpty","ltrim","rtrim","isLength","inputChangedHandler","event","inputIdentifier","updatedForm","updatedFormElement","target","setState","render","map","inputField","signupHandler"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport axios from \"axios\";\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\"\nimport { exportDefaultSpecifier } from \"@babel/types\";\n\nclass SignupFormContainer extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      form:{\n        name: {\n          elementType: \"input\",\n          inputType: \"text\",\n          placeholder: \"Your Name\",\n          value: \"\",\n          validationRules:{\n            required: true\n          },\n          valid: false,//whether value is false or correct\n          touched: false\n        },\n        enrollNo:{\n          elementType: \"input\",\n          inputType: \"number\",\n          placeholder: \"Your Enroll No\",\n          valid: \"false\",\n          validationRules:{\n            required: true,\n            isNumber: true\n          },\n          valid: false,\n          touched: true\n        },\n        email:{\n          elementType: \"input\",\n          inputType: \"email\",\n          placeholder: \"Your Email\",\n          value:\" \",\n          valid: false,\n          touched: false,\n          validationRules:{\n            required: true,\n            isEmail: true\n          }\n        },\n        password:{\n          elementType: \"input\",\n          inputType: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          valid: false,\n          validationRules:{\n            required: true,\n          }\n        }\n      },\n      formIsValid: false,//this property can be used to check whether we can submit the form or not\n      loading: false\n    }\n  }\n\n  checkValidity(rules, value){\n    let isValid = true\n    Object.keys(rules).forEach(rule => {\n      if(rule == \"required\"){\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)))\n      }else if(rule == \"minlen\"){\n        isValid = isValid && !Validator.isLength(value, rules[rule])\n      }else if(rule == \"maxlen\"){\n        isValid = isValid && !Validator.isLength(value, 0, rules[rule]+1)\n      }else if(rule == \"isEmail\"){\n        isValid = isValid && !Validator.isEmail(value)\n      }else if(rule == \"isNumber\"){\n        isValid = isValid && !Validator.isNumber(value)\n      }\n    })\n    return isValid\n  }\n  inputChangedHandler(event, inputIdentifier){\n    //make an instance fo the form\n    const updatedForm = {\n      ...this.state.form\n    }\n    //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n    const updatedFormElement = updatedForm[inputIdentifier]\n\n    //set the new value\n    updatedFormElement.value = event.target.value\n    //check the validity of the new value\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value)\n    \n    //set the element of the form to the updated form\n    updatedForm[inputIdentifier] = updatedFormElement\n    \n    //check the validity of the form\n    let formIsValid = true\n    for (let inputIdentifier in updatedForm){\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid\n    }\n\n    //set the from in the state to the updated form and also set the validity status of yhe form\n    this.setState({\n      form:updatedForm,\n      formIsValid: formIsValid\n    })\n\n  }\n\n  render(){\n    const form = Object.keys(this.state.form).map(inputField => (\n      <Input elementType = {this.state.form[inputField].elementType}\n      inputType = {this.state.form[inputField].inputType}\n      placeholder = {this.state.form[inputField].placeholder}\n      value = {this.state.form[inputField].value}\n      valid = {this.state.form[inputField].valid}\n      changed = {(event) => this.inputChangedHandler(event, inputField)}\n      />\n    ))\n    return(\n      <form onSubmit = {this.signupHandler} className = {styles.SignupFormContainer}>\n        {form}\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid}>Submit</Button>\n      </form>\n    )\n  }\n}\n\nexport default SignupFormContainer;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/tapchief-assingement/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/SignupFormContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport axios from \"axios\";\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\";\n\nclass SignupFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.signupHandler = async event => {\n      try {\n        event.preventDefault();\n        let formData = {};\n\n        for (let formElementIdentifier in this.state.form) {\n          formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\n        }\n\n        console.log(formData);\n        const res = await axios({\n          method: \"POST\",\n          url: \"http://127.0.0.1:9000/emotion-detector/user/signup\",\n          data: formData\n        });\n\n        if (res.data.status == \"success\") {\n          console.log(res.data.newUser);\n          this.props.setUpAuthHandler(res.data.newUser);\n          alert(\"signed up successfully\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      form: {\n        text: {\n          elementType: \"input\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules: {\n            required: true\n          },\n          valid: false,\n          //whether value is false or correct\n          touched: false\n        }\n        /*enrollNo:{\n          elementType: \"input\",\n          inputType: \"number\",\n          placeholder: \"Your Enroll No\",\n          valid: \"false\",\n          validationRules:{\n            required: true,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        },\n        email:{\n          elementType: \"input\",\n          inputType: \"email\",\n          placeholder: \"Your Email\",\n          value:\" \",\n          valid: false,\n          touched: false,\n          validationRules:{\n            required: true,\n            isEmail: true\n          }\n        },\n        password:{\n          elementType: \"input\",\n          inputType: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          valid: false,\n          touched: false,\n          validationRules:{\n            required: true,\n          }\n        }*/\n\n      },\n      formIsValid: false,\n      //this property can be used to check whether we can submit the form or not\n      loading: false\n    };\n  }\n\n  checkValidity(rules, value) {\n    let isValid = true;\n    Object.keys(rules).forEach(rule => {\n      if (rule == \"required\") {\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)));\n      } else if (rule == \"minlen\") {\n        isValid = isValid && Validator.isLength(value, rules[rule]);\n      } else if (rule == \"maxlen\") {\n        isValid = isValid && Validator.isLength(value, 0, rules[rule] + 1);\n      } else if (rule == \"isEmail\") {\n        isValid = isValid && Validator.isEmail(value);\n      } else if (rule == \"isNumber\") {\n        isValid = isValid && Validator.isNumeric(value);\n      }\n    });\n    return isValid;\n  }\n\n  inputChangedHandler(event, inputIdentifier) {\n    //make an instance fo the form\n    const updatedForm = _objectSpread({}, this.state.form); //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n\n\n    const updatedFormElement = updatedForm[inputIdentifier]; //set the new value\n\n    updatedFormElement.value = event.target.value; //check the validity of the new value\n\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value);\n    updatedFormElement.touched = true; //set the element of the form to the updated form\n\n    updatedForm[inputIdentifier] = updatedFormElement; //check the validity of the form\n\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedForm) {\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n    } //set the from in the state to the updated form and also set the validity status of yhe form\n\n\n    this.setState({\n      form: updatedForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const form = Object.keys(this.state.form).map(inputField => React.createElement(Input, {\n      elementType: this.state.form[inputField].elementType,\n      inputType: this.state.form[inputField].inputType,\n      placeholder: this.state.form[inputField].placeholder,\n      value: this.state.form[inputField].value,\n      valid: this.state.form[inputField].valid,\n      changed: event => this.inputChangedHandler(event, inputField),\n      touched: this.state.form[inputField].touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n    return React.createElement(\"form\", {\n      onSubmit: this.signupHandler,\n      className: styles.SignupFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      classes: [\"Submit\"],\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default SignupFormContainer;","map":{"version":3,"sources":["/home/arpit/Documents/tapchief-assingement/src/components/formsContainers/SignupFormContainer.js"],"names":["React","Component","Button","styles","axios","Input","Validator","SignupFormContainer","constructor","props","signupHandler","event","preventDefault","formData","formElementIdentifier","state","form","value","console","log","res","method","url","data","status","newUser","setUpAuthHandler","alert","error","text","elementType","inputType","placeholder","validationRules","required","valid","touched","formIsValid","loading","checkValidity","rules","isValid","Object","keys","forEach","rule","isEmpty","ltrim","rtrim","isLength","isEmail","isNumeric","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","setState","render","map","inputField"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Button from \"./../UI/Button/Button\";\nimport styles from \"./SignupFormContainer.module.css\";\nimport axios from \"axios\";\nimport Input from \"./../UI/Input/Input\";\nimport Validator from \"validator\"\n\nclass SignupFormContainer extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      form:{\n        text: {\n          elementType: \"input\",\n          inputType: \"textarea\",\n          placeholder: \"Enter text here\",\n          value: \"\",\n          validationRules:{\n            required: true\n          },\n          valid: false,//whether value is false or correct\n          touched: false\n        },\n        /*enrollNo:{\n          elementType: \"input\",\n          inputType: \"number\",\n          placeholder: \"Your Enroll No\",\n          valid: \"false\",\n          validationRules:{\n            required: true,\n            isNumber: true\n          },\n          valid: false,\n          touched: false\n        },\n        email:{\n          elementType: \"input\",\n          inputType: \"email\",\n          placeholder: \"Your Email\",\n          value:\" \",\n          valid: false,\n          touched: false,\n          validationRules:{\n            required: true,\n            isEmail: true\n          }\n        },\n        password:{\n          elementType: \"input\",\n          inputType: \"password\",\n          placeholder: \"Password\",\n          value: \"\",\n          valid: false,\n          touched: false,\n          validationRules:{\n            required: true,\n          }\n        }*/\n      },\n      formIsValid: false,//this property can be used to check whether we can submit the form or not\n      loading: false\n    }\n  }\n\n  checkValidity(rules, value){\n    let isValid = true\n    Object.keys(rules).forEach(rule => {\n      if(rule == \"required\"){\n        isValid = isValid && !Validator.isEmpty(Validator.ltrim(Validator.rtrim(value)))\n      }else if(rule == \"minlen\"){\n        isValid = isValid && Validator.isLength(value, rules[rule])\n      }else if(rule == \"maxlen\"){\n        isValid = isValid && Validator.isLength(value, 0, rules[rule]+1)\n      }else if(rule == \"isEmail\"){\n        isValid = isValid && Validator.isEmail(value)\n      }else if(rule == \"isNumber\"){\n        isValid = isValid && Validator.isNumeric(value)\n      }\n    })\n    return isValid\n  }\n  inputChangedHandler(event, inputIdentifier){\n    //make an instance fo the form\n    const updatedForm = {\n      ...this.state.form\n    }\n    //console.log(updatedForm)\n    //console.log(inputIdentifier)\n    //get the element of yhe form which needs to be updated \n    const updatedFormElement = updatedForm[inputIdentifier]\n\n    //set the new value\n    updatedFormElement.value = event.target.value\n    //check the validity of the new value\n    updatedFormElement.valid = this.checkValidity(updatedFormElement.validationRules, updatedFormElement.value)\n\n    updatedFormElement.touched = true\n    \n    //set the element of the form to the updated form\n    updatedForm[inputIdentifier] = updatedFormElement\n    \n    //check the validity of the form\n    let formIsValid = true\n    for (let inputIdentifier in updatedForm){\n      formIsValid = updatedForm[inputIdentifier].valid && formIsValid\n    }\n\n    //set the from in the state to the updated form and also set the validity status of yhe form\n    this.setState({\n      form:updatedForm,\n      formIsValid: formIsValid\n    })\n\n  }\n\n  signupHandler = async (event) => {\n    try{\n      event.preventDefault()\n      let formData = {}\n      for (let formElementIdentifier in this.state.form) {\n        formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\n    }\n    console.log(formData)\n      const res = await axios({\n        method: \"POST\",\n        url: \"http://127.0.0.1:9000/emotion-detector/user/signup\",\n        data: formData\n      })\n      if(res.data.status == \"success\"){\n        console.log(res.data.newUser)\n        this.props.setUpAuthHandler(res.data.newUser)\n        alert(\"signed up successfully\")        \n      }\n    }catch(error){\n      console.log(error)\n    }\n  }\n\n  render(){\n    const form = Object.keys(this.state.form).map(inputField => (\n      <Input elementType = {this.state.form[inputField].elementType}\n      inputType = {this.state.form[inputField].inputType}\n      placeholder = {this.state.form[inputField].placeholder}\n      value = {this.state.form[inputField].value}\n      valid = {this.state.form[inputField].valid}\n      changed = {(event) => this.inputChangedHandler(event, inputField)}\n      touched = {this.state.form[inputField].touched}\n      />\n    ))\n    return(\n      <form onSubmit = {this.signupHandler} className = {styles.SignupFormContainer}>\n        {form}\n        <Button classes = {[\"Submit\"]} disabled = {!this.state.formIsValid}>Submit</Button>\n      </form>\n    )\n  }\n}\n\nexport default SignupFormContainer;"]},"metadata":{},"sourceType":"module"}
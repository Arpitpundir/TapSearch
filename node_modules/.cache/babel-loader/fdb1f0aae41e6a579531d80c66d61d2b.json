{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/minor1/emotional-detector/src/components/UI/Input/Input.js\";\nimport React from \"react\";\nimport styles from \"./Input.module.css\";\nimport { optionalCallExpression } from \"@babel/types\";\n\nconst input = props => {\n  let inputElement = null; //we will use this var to store the final return value\n\n  const inputClasses = [styles.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(styles.Invalid); //for adding an invalid classes that can help user to know what is wrong\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = React.createElement(\"input\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n      break;\n\n    case \"textarea\":\n      inputElment = React.createElement(\"textarea\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n      break;\n\n    case \"select\":\n      inputElement = React.createElement(\"select\", {\n        className: classes.join(\" \"),\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, props.elementConfig.options.map(option => React.createElement(\"option\", {\n        key: option.value,\n        value: option.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, option.displayValue)));\n      break;\n\n    default:\n      inputElement = React.createElement(\"input\", {\n        className: inputClasses.join(\"  \"),\n        type: props.inputType,\n        placeholder: props.placeholder,\n        value: props.value,\n        onChange: props.changed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n  }\n\n  return React.createElement(\"div\", {\n    className: styles.input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: classes.Label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, props.label));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/arpit/Documents/minor1/emotional-detector/src/components/UI/Input/Input.js"],"names":["React","styles","optionalCallExpression","input","props","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","join","inputType","placeholder","value","changed","inputElment","classes","elementConfig","options","map","option","displayValue","Label","label","Input"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,sBAAT,QAAuC,cAAvC;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAS;AACrB,MAAIC,YAAY,GAAG,IAAnB,CADqB,CACE;;AACvB,QAAMC,YAAY,GAAG,CAACL,MAAM,CAACM,YAAR,CAArB;;AAEA,MAAGH,KAAK,CAACI,OAAN,IAAiBJ,KAAK,CAACK,cAAvB,IAAyCL,KAAK,CAACM,OAAlD,EAA0D;AACxDJ,IAAAA,YAAY,CAACK,IAAb,CAAkBV,MAAM,CAACW,OAAzB,EADwD,CAExD;AACD;;AAED,UAAOR,KAAK,CAACS,WAAb;AACE,SAAK,OAAL;AACAR,MAAAA,YAAY,GAAG;AACb,QAAA,SAAS,EAAIC,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CADA;AAEb,QAAA,IAAI,EAAIV,KAAK,CAACW,SAFD;AAGb,QAAA,WAAW,EAAIX,KAAK,CAACY,WAHR;AAIb,QAAA,KAAK,EAAIZ,KAAK,CAACa,KAJF;AAKb,QAAA,QAAQ,EAAIb,KAAK,CAACc,OALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AAME;;AACF,SAAK,UAAL;AACAC,MAAAA,WAAW,GAAG;AACZ,QAAA,SAAS,EAAIb,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CADD;AAEZ,QAAA,IAAI,EAAIV,KAAK,CAACW,SAFF;AAGZ,QAAA,WAAW,EAAIX,KAAK,CAACY,WAHT;AAIZ,QAAA,KAAK,EAAIZ,KAAK,CAACa,KAJH;AAKZ,QAAA,QAAQ,EAAIb,KAAK,CAACc,OALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;AAME;;AACF,SAAK,QAAL;AACEb,MAAAA,YAAY,GAAG;AACb,QAAA,SAAS,EAAIe,OAAO,CAACN,IAAR,CAAa,GAAb,CADA;AAEb,QAAA,KAAK,EAAIV,KAAK,CAACa,KAFF;AAGb,QAAA,QAAQ,EAAIb,KAAK,CAACc,OAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKTd,KAAK,CAACiB,aAAN,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgCC,MAAM,IACpC;AAAQ,QAAA,GAAG,EAAIA,MAAM,CAACP,KAAtB;AAA6B,QAAA,KAAK,EAAIO,MAAM,CAACP,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGO,MAAM,CAACC,YADV,CADF,CALS,CAAf;AAYA;;AACF;AACEpB,MAAAA,YAAY,GAAG;AACf,QAAA,SAAS,EAAIC,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CADE;AAEf,QAAA,IAAI,EAAIV,KAAK,CAACW,SAFC;AAGf,QAAA,WAAW,EAAIX,KAAK,CAACY,WAHN;AAIf,QAAA,KAAK,EAAIZ,KAAK,CAACa,KAJA;AAKf,QAAA,QAAQ,EAAIb,KAAK,CAACc,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AAhCJ;;AAwCA,SACE;AAAK,IAAA,SAAS,EAAIjB,MAAM,CAACE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,SAAS,EAAIiB,OAAO,CAACM,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCtB,KAAK,CAACuB,KAA1C,CADF,CADF;AAMD,CAvDD;;AAyDA,eAAeC,KAAf","sourcesContent":["import React from \"react\";\nimport styles from \"./Input.module.css\";\nimport { optionalCallExpression } from \"@babel/types\";\n\nconst input = (props)=>{\n  let inputElement = null//we will use this var to store the final return value\n  const inputClasses = [styles.InputElement]\n\n  if(props.invalid && props.shouldValidate && props.touched){\n    inputClasses.push(styles.Invalid)\n    //for adding an invalid classes that can help user to know what is wrong\n  }\n\n  switch(props.elementType){\n    case(\"input\"):\n    inputElement = <input\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      value = {props.value}\n      onChange = {props.changed}/>\n      break\n    case(\"textarea\"):\n    inputElment = <textarea\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      value = {props.value}\n      onChange = {props.changed}/>\n      break\n    case(\"select\"):\n      inputElement = <select\n        className = {classes.join(\" \")}\n        value = {props.value}\n        onChange = {props.changed}>\n          {\n            props.elementConfig.options.map(option => (\n              <option key = {option.value} value = {option.value}>\n                {option.displayValue}\n              </option>\n            ))\n          }\n        </select>\n      break\n    default:\n      inputElement = <input\n      className = {inputClasses.join(\"  \")}\n      type = {props.inputType}\n      placeholder = {props.placeholder}\n      value = {props.value}\n      onChange = {props.changed}/>\n  }\n\n  return(\n    <div className = {styles.input}>\n      <label className = {classes.Label}>{props.label}</label>\n    </div>\n  )\n\n}\n\nexport default Input"]},"metadata":{},"sourceType":"module"}